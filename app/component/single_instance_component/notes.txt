"use client";
import { useEffect, useState } from "react";
import editSavedTask from "../../styles/editSavedTask.module.css";
import { showSavedTaskDetailView } from "../backend_component/TaskBackend";

export default function EditSavedTask({
   closeEditTaskView,
   taskId,
}: {
   closeEditTaskView: () => void;
   taskId?: number | null;
}): JSX.Element {
   const [activeSelection, setActiveSelection] = useState<"none" | "dashboardGroup" | "dashboardRoute">("none");
   const [rows, setRows] = useState([{ id: 1, userInput: "" }]);

   function handleSelection(selection: "dashboardGroup" | "dashboardRoute") {
      setActiveSelection((prevSelection) =>
         prevSelection === selection ? "none" : selection
      );
   }

   useEffect(() => {
      async function savedTaskQuery() {
         try {
            const receivedTableName = "personal_task";
            if (taskId != null) {
               const result = await showSavedTaskDetailView(taskId, receivedTableName);
               console.log("Fetched Task Details:", result);
               // Set fetched rows to state (if applicable)
               if (result) {
                  setRows(result);
               }
            } else {
               console.warn("Invalid taskId provided. Skipping query.");
            }
         } catch (error: unknown) {
            console.error("Error Fetching Task:", error);
         }
      }

      // Call the function inside the effect
      savedTaskQuery();
   }, [taskId]);

   return (
      <div className={editSavedTask.container}>
         {/* Title Section */}
         <div className={editSavedTask.title}>
            <p className={editSavedTask.task_condition}>Editing : My Demo Title</p>
         </div>

         {/* Header Section */}
         <div className={editSavedTask.header}>
            <div className={editSavedTask.moreTitleDetails}>
               {/* Dashboard Group Selector */}
               <div className={editSavedTask.dashboard}>
                  <button
                     className={editSavedTask.dashboard_container}
                     onClick={() => handleSelection("dashboardGroup")}
                  >
                     <div className={editSavedTask.dashboard_selector}>Dashboard Group</div>
                     <div className={editSavedTask.selector_icon}>
                        {/* SVG */}
                     </div>
                  </button>
                  {activeSelection === "dashboardGroup" && (
                     <div className={editSavedTask.group_selector_container}>
                        {/* Group Options */}
                        {["Personal", "Work", "Time Bound", "Completed", "Missed", "Goal"].map((option) => (
                           <button key={option} className={editSavedTask.dashboard_options}>
                              {option}
                           </button>
                        ))}
                     </div>
                  )}
               </div>

               {/* Dashboard Route Selector */}
               <div className={editSavedTask.editing_items}>
                  <button
                     className={editSavedTask.dashboard_container}
                     onClick={() => handleSelection("dashboardRoute")}
                  >
                     <div className={editSavedTask.dashboard_selector}>Dashboard Route</div>
                     <div className={editSavedTask.selector_icon}>
                        {/* SVG */}
                     </div>
                  </button>
                  {activeSelection === "dashboardRoute" && (
                     <div className={editSavedTask.route_selector_container}>
                        {/* Route Options */}
                        {[
                           "Upcoming Tasks",
                           "High-Priority",
                           "Primary Task",
                           "Deadline Task",
                           "Time Bound",
                           "Missed Task",
                           "Custom Task",
                           "Archived Task",
                        ].map((option) => (
                           <button key={option} className={editSavedTask.dashboard_options}>
                              {option}
                           </button>
                        ))}
                     </div>
                  )}
               </div>

               {/* Time Input */}
               <div className={editSavedTask.editing_items}>
                  <title>Enter The Time Your tasks Should End</title>
                  <input type="time" className={editSavedTask.input_time} />
               </div>

               {/* Title Input */}
               <div className={editSavedTask.editing_items}>
                  <title>Enter The Time Your tasks Should End</title>
                  <input type="text" className={editSavedTask.input_new_Title} placeholder="New Task Title" />
               </div>

               {/* Close Button */}
               <button
                  className={editSavedTask.taskOptions_items}
                  onClick={(e) => {
                     e.preventDefault();
                     e.stopPropagation();
                     closeEditTaskView();
                  }}
               >
                  Close
               </button>
            </div>
         </div>

         {/* Task Table */}
         <div className={editSavedTask.table_container}>
            <table className={editSavedTask.task_table}>
               <tbody className={editSavedTask.table_body}>
                  {rows.map((row) => (
                     <tr key={row.id} className={editSavedTask.content}>
                        <th className={editSavedTask.mark}>
                           <div className={editSavedTask.taskCount}>{row.id}</div>
                        </th>
                        <td className={editSavedTask.user_text}>
                           <input
                              type="text"
                              className={editSavedTask.user_input}
                              placeholder="Enter Your Task"
                              value={row.userInput}
                              onChange={(e) => {
                                 const updatedRows = rows.map((r) =>
                                    r.id === row.id ? { ...r, userInput: e.target.value } : r
                                 );
                                 setRows(updatedRows);
                              }}
                           />
                        </td>
                        <td className={editSavedTask.user_delete}>
                           {/* SVG */}
                        </td>
                     </tr>
                  ))}
               </tbody>
            </table>
         </div>

         {/* Save Button */}
         <button className={editSavedTask.update_details}>Save</button>
      </div>
   );
}
